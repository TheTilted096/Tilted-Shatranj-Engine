/*
This is the 2nd Base of the Tilted Refactoring

This File Contains the Generator Class:
Primary Move Generation

TheTilted096, 7-6-24
*/

#include <cassert>
#include <chrono> //time management 
#include <cstdint> //uint64_t, uint32_t, uint8_t
#include <cmath> //calculations in search parameters
#include <fstream> //data IO
#include <immintrin.h> //_pext_u64
#include <iostream> //user IO
#include <random> //variable data creation
#include <sstream> //input IO
#include <string> //IO purposes

//#pragma clang target("popcnt")
//#pragma GCC optimize("O2")

typedef uint32_t Move;
typedef uint64_t Bitboard;
typedef uint64_t Hash;

class Bitboards{
    static bool RookInit;
    protected:
        static constexpr Bitboard plt[2][64] =
        {{0x200ULL, 0x500ULL, 0xA00ULL, 0x1400ULL, 0x2800ULL, 0x5000ULL, 0xA000ULL, 0x4000ULL, 
        0x20000ULL, 0x50000ULL, 0xA0000ULL, 0x140000ULL, 0x280000ULL, 0x500000ULL, 0xA00000ULL, 0x400000ULL, 
        0x2000000ULL, 0x5000000ULL, 0xA000000ULL, 0x14000000ULL, 0x28000000ULL, 0x50000000ULL, 0xA0000000ULL, 0x40000000ULL, 
        0x200000000ULL, 0x500000000ULL, 0xA00000000ULL, 0x1400000000ULL, 0x2800000000ULL, 0x5000000000ULL, 0xA000000000ULL, 0x4000000000ULL, 
        0x20000000000ULL, 0x50000000000ULL, 0xA0000000000ULL, 0x140000000000ULL, 0x280000000000ULL, 0x500000000000ULL, 0xA00000000000ULL, 0x400000000000ULL, 
        0x2000000000000ULL, 0x5000000000000ULL, 0xA000000000000ULL, 0x14000000000000ULL, 0x28000000000000ULL, 0x50000000000000ULL, 0xA0000000000000ULL, 0x40000000000000ULL, 
        0x200000000000000ULL, 0x500000000000000ULL, 0xA00000000000000ULL, 0x1400000000000000ULL, 0x2800000000000000ULL, 0x5000000000000000ULL, 0xA000000000000000ULL, 0x4000000000000000ULL, 
        0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL}, {
        0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 
        0x2ULL, 0x5ULL, 0xAULL, 0x14ULL, 0x28ULL, 0x50ULL, 0xA0ULL, 0x40ULL, 
        0x200ULL, 0x500ULL, 0xA00ULL, 0x1400ULL, 0x2800ULL, 0x5000ULL, 0xA000ULL, 0x4000ULL, 
        0x20000ULL, 0x50000ULL, 0xA0000ULL, 0x140000ULL, 0x280000ULL, 0x500000ULL, 0xA00000ULL, 0x400000ULL, 
        0x2000000ULL, 0x5000000ULL, 0xA000000ULL, 0x14000000ULL, 0x28000000ULL, 0x50000000ULL, 0xA0000000ULL, 0x40000000ULL, 
        0x200000000ULL, 0x500000000ULL, 0xA00000000ULL, 0x1400000000ULL, 0x2800000000ULL, 0x5000000000ULL, 0xA000000000ULL, 0x4000000000ULL, 
        0x20000000000ULL, 0x50000000000ULL, 0xA0000000000ULL, 0x140000000000ULL, 0x280000000000ULL, 0x500000000000ULL, 0xA00000000000ULL, 0x400000000000ULL, 
        0x2000000000000ULL, 0x5000000000000ULL, 0xA000000000000ULL, 0x14000000000000ULL, 0x28000000000000ULL, 0x50000000000000ULL, 0xA0000000000000ULL, 0x40000000000000ULL}};

        static constexpr Bitboard llt[5][64] =
        {{0x302ULL, 0x705ULL, 0xE0AULL, 0x1C14ULL, 0x3828ULL, 0x7050ULL, 0xE0A0ULL, 0xC040ULL, 
        0x30203ULL, 0x70507ULL, 0xE0A0EULL, 0x1C141CULL, 0x382838ULL, 0x705070ULL, 0xE0A0E0ULL, 0xC040C0ULL, 
        0x3020300ULL, 0x7050700ULL, 0xE0A0E00ULL, 0x1C141C00ULL, 0x38283800ULL, 0x70507000ULL, 0xE0A0E000ULL, 0xC040C000ULL, 
        0x302030000ULL, 0x705070000ULL, 0xE0A0E0000ULL, 0x1C141C0000ULL, 0x3828380000ULL, 0x7050700000ULL, 0xE0A0E00000ULL, 0xC040C00000ULL, 
        0x30203000000ULL, 0x70507000000ULL, 0xE0A0E000000ULL, 0x1C141C000000ULL, 0x382838000000ULL, 0x705070000000ULL, 0xE0A0E0000000ULL, 0xC040C0000000ULL, 
        0x3020300000000ULL, 0x7050700000000ULL, 0xE0A0E00000000ULL, 0x1C141C00000000ULL, 0x38283800000000ULL, 0x70507000000000ULL, 0xE0A0E000000000ULL, 0xC040C000000000ULL, 
        0x302030000000000ULL, 0x705070000000000ULL, 0xE0A0E0000000000ULL, 0x1C141C0000000000ULL, 0x3828380000000000ULL, 0x7050700000000000ULL, 0xE0A0E00000000000ULL, 0xC040C00000000000ULL, 
        0x203000000000000ULL, 0x507000000000000ULL, 0xA0E000000000000ULL, 0x141C000000000000ULL, 0x2838000000000000ULL, 0x5070000000000000ULL, 0xA0E0000000000000ULL, 0x40C0000000000000ULL}, {
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 
        0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL}, {
        0x20400ULL, 0x50800ULL, 0xA1100ULL, 0x142200ULL, 0x284400ULL, 0x508800ULL, 0xA01000ULL, 0x402000ULL, 
        0x2040004ULL, 0x5080008ULL, 0xA110011ULL, 0x14220022ULL, 0x28440044ULL, 0x50880088ULL, 0xA0100010ULL, 0x40200020ULL, 
        0x204000402ULL, 0x508000805ULL, 0xA1100110AULL, 0x1422002214ULL, 0x2844004428ULL, 0x5088008850ULL, 0xA0100010A0ULL, 0x4020002040ULL, 
        0x20400040200ULL, 0x50800080500ULL, 0xA1100110A00ULL, 0x142200221400ULL, 0x284400442800ULL, 0x508800885000ULL, 0xA0100010A000ULL, 0x402000204000ULL, 
        0x2040004020000ULL, 0x5080008050000ULL, 0xA1100110A0000ULL, 0x14220022140000ULL, 0x28440044280000ULL, 0x50880088500000ULL, 0xA0100010A00000ULL, 0x40200020400000ULL, 
        0x204000402000000ULL, 0x508000805000000ULL, 0xA1100110A000000ULL, 0x1422002214000000ULL, 0x2844004428000000ULL, 0x5088008850000000ULL, 0xA0100010A0000000ULL, 0x4020002040000000ULL, 
        0x400040200000000ULL, 0x800080500000000ULL, 0x1100110A00000000ULL, 0x2200221400000000ULL, 0x4400442800000000ULL, 0x8800885000000000ULL, 0x100010A000000000ULL, 0x2000204000000000ULL, 
        0x4020000000000ULL, 0x8050000000000ULL, 0x110A0000000000ULL, 0x22140000000000ULL, 0x44280000000000ULL, 0x88500000000000ULL, 0x10A00000000000ULL, 0x20400000000000ULL}, {
        0x200ULL, 0x500ULL, 0xA00ULL, 0x1400ULL, 0x2800ULL, 0x5000ULL, 0xA000ULL, 0x4000ULL, 
        0x20002ULL, 0x50005ULL, 0xA000AULL, 0x140014ULL, 0x280028ULL, 0x500050ULL, 0xA000A0ULL, 0x400040ULL, 
        0x2000200ULL, 0x5000500ULL, 0xA000A00ULL, 0x14001400ULL, 0x28002800ULL, 0x50005000ULL, 0xA000A000ULL, 0x40004000ULL, 
        0x200020000ULL, 0x500050000ULL, 0xA000A0000ULL, 0x1400140000ULL, 0x2800280000ULL, 0x5000500000ULL, 0xA000A00000ULL, 0x4000400000ULL, 
        0x20002000000ULL, 0x50005000000ULL, 0xA000A000000ULL, 0x140014000000ULL, 0x280028000000ULL, 0x500050000000ULL, 0xA000A0000000ULL, 0x400040000000ULL, 
        0x2000200000000ULL, 0x5000500000000ULL, 0xA000A00000000ULL, 0x14001400000000ULL, 0x28002800000000ULL, 0x50005000000000ULL, 0xA000A000000000ULL, 0x40004000000000ULL, 
        0x200020000000000ULL, 0x500050000000000ULL, 0xA000A0000000000ULL, 0x1400140000000000ULL, 0x2800280000000000ULL, 0x5000500000000000ULL, 0xA000A00000000000ULL, 0x4000400000000000ULL, 
        0x2000000000000ULL, 0x5000000000000ULL, 0xA000000000000ULL, 0x14000000000000ULL, 0x28000000000000ULL, 0x50000000000000ULL, 0xA0000000000000ULL, 0x40000000000000ULL}, {
        0x40000ULL, 0x80000ULL, 0x110000ULL, 0x220000ULL, 0x440000ULL, 0x880000ULL, 0x100000ULL, 0x200000ULL, 
        0x4000000ULL, 0x8000000ULL, 0x11000000ULL, 0x22000000ULL, 0x44000000ULL, 0x88000000ULL, 0x10000000ULL, 0x20000000ULL, 
        0x400000004ULL, 0x800000008ULL, 0x1100000011ULL, 0x2200000022ULL, 0x4400000044ULL, 0x8800000088ULL, 0x1000000010ULL, 0x2000000020ULL, 
        0x40000000400ULL, 0x80000000800ULL, 0x110000001100ULL, 0x220000002200ULL, 0x440000004400ULL, 0x880000008800ULL, 0x100000001000ULL, 0x200000002000ULL, 
        0x4000000040000ULL, 0x8000000080000ULL, 0x11000000110000ULL, 0x22000000220000ULL, 0x44000000440000ULL, 0x88000000880000ULL, 0x10000000100000ULL, 0x20000000200000ULL, 
        0x400000004000000ULL, 0x800000008000000ULL, 0x1100000011000000ULL, 0x2200000022000000ULL, 0x4400000044000000ULL, 0x8800000088000000ULL, 0x1000000010000000ULL, 0x2000000020000000ULL, 
        0x400000000ULL, 0x800000000ULL, 0x1100000000ULL, 0x2200000000ULL, 0x4400000000ULL, 0x8800000000ULL, 0x1000000000ULL, 0x2000000000ULL, 
        0x40000000000ULL, 0x80000000000ULL, 0x110000000000ULL, 0x220000000000ULL, 0x440000000000ULL, 0x880000000000ULL, 0x100000000000ULL, 0x200000000000ULL}};

        static constexpr uint8_t hlt[8][64] =
        {{0xFE, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x3E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x7E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x3E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2}, {
        0x0, 0xFD, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x3D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x7D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x3D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5}, {
        0x0, 0x0, 0xFB, 0xFA, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x3B, 0x3A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x7B, 0x7A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x3B, 0x3A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA}, {
        0x0, 0x0, 0x0, 0x0, 0xF7, 0xF6, 0xF4, 0xF4, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14, 
        0x0, 0x0, 0x0, 0x0, 0x37, 0x36, 0x34, 0x34, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14, 
        0x0, 0x0, 0x0, 0x0, 0x77, 0x76, 0x74, 0x74, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14, 
        0x0, 0x0, 0x0, 0x0, 0x37, 0x36, 0x34, 0x34, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14}, {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0xEF, 0xEE, 0xEC, 0xEC, 0xE8, 0xE8, 0xE8, 0xE8, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x2F, 0x2E, 0x2C, 0x2C, 0x28, 0x28, 0x28, 0x28, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x6F, 0x6E, 0x6C, 0x6C, 0x68, 0x68, 0x68, 0x68, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x2F, 0x2E, 0x2C, 0x2C, 0x28, 0x28, 0x28, 0x28}, {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0xDF, 0xDE, 0xDC, 0xDC, 0xD8, 0xD8, 0xD8, 0xD8, 
        0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x5F, 0x5E, 0x5C, 0x5C, 0x58, 0x58, 0x58, 0x58, 
        0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50}, {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0xBF, 0xBE, 0xBC, 0xBC, 0xB8, 0xB8, 0xB8, 0xB8, 
        0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 
        0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 
        0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0}, {
        0x7F, 0x7E, 0x7C, 0x7C, 0x78, 0x78, 0x78, 0x78, 
        0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 
        0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
        0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40}};

        static constexpr uint8_t RookBits[64] = 
        {12, 11, 11, 11, 11, 11, 11, 12,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        12, 11, 11, 11, 11, 11, 11, 12};

        static constexpr Bitboard RookMasks[64] = 
        {0x101010101017EULL, 0x202020202027CULL, 0x404040404047AULL, 0x8080808080876ULL, 
        0x1010101010106EULL, 0x2020202020205EULL, 0x4040404040403EULL, 0x8080808080807EULL, 
        0x1010101017E00ULL, 0x2020202027C00ULL, 0x4040404047A00ULL, 0x8080808087600ULL, 
        0x10101010106E00ULL, 0x20202020205E00ULL, 0x40404040403E00ULL, 0x80808080807E00ULL, 
        0x10101017E0100ULL, 0x20202027C0200ULL, 0x40404047A0400ULL, 0x8080808760800ULL, 
        0x101010106E1000ULL, 0x202020205E2000ULL, 0x404040403E4000ULL, 0x808080807E8000ULL, 
        0x101017E010100ULL, 0x202027C020200ULL, 0x404047A040400ULL, 0x8080876080800ULL, 
        0x1010106E101000ULL, 0x2020205E202000ULL, 0x4040403E404000ULL, 0x8080807E808000ULL, 
        0x1017E01010100ULL, 0x2027C02020200ULL, 0x4047A04040400ULL, 0x8087608080800ULL, 
        0x10106E10101000ULL, 0x20205E20202000ULL, 0x40403E40404000ULL, 0x80807E80808000ULL, 
        0x17E0101010100ULL, 0x27C0202020200ULL, 0x47A0404040400ULL, 0x8760808080800ULL, 
        0x106E1010101000ULL, 0x205E2020202000ULL, 0x403E4040404000ULL, 0x807E8080808000ULL, 
        0x7E010101010100ULL, 0x7C020202020200ULL, 0x7A040404040400ULL, 0x76080808080800ULL, 
        0x6E101010101000ULL, 0x5E202020202000ULL, 0x3E404040404000ULL, 0x7E808080808000ULL, 
        0x7E01010101010100ULL, 0x7C02020202020200ULL, 0x7A04040404040400ULL, 0x7608080808080800ULL, 
        0x6E10101010101000ULL, 0x5E20202020202000ULL, 0x3E40404040404000ULL, 0x7E80808080808000ULL};
        
        static constexpr int RookOffset[64] = 
        {0x0, 0x1000, 0x1800, 0x2000, 
        0x2800, 0x3000, 0x3800, 0x4000, 
        0x5000, 0x5800, 0x5C00, 0x6000, 
        0x6400, 0x6800, 0x6C00, 0x7000, 
        0x7800, 0x8000, 0x8400, 0x8800, 
        0x8C00, 0x9000, 0x9400, 0x9800, 
        0xA000, 0xA800, 0xAC00, 0xB000, 
        0xB400, 0xB800, 0xBC00, 0xC000, 
        0xC800, 0xD000, 0xD400, 0xD800, 
        0xDC00, 0xE000, 0xE400, 0xE800, 
        0xF000, 0xF800, 0xFC00, 0x10000, 
        0x10400, 0x10800, 0x10C00, 0x11000, 
        0x11800, 0x12000, 0x12400, 0x12800, 
        0x12C00, 0x13000, 0x13400, 0x13800, 
        0x14000, 0x15000, 0x15800, 0x16000, 
        0x16800, 0x17000, 0x17800, 0x18000};
        
        static Bitboard hqRookAttack(int, Bitboard);

        static Bitboard RookBoards[0x19000];

        Bitboard sides[2];
        Bitboard pieces[6];
        bool toMove;

    public:
        Bitboards();
        static void initRookTable();
        
        bool isChecked(bool);

        bool ownBare(bool);
        bool kingBare();

        void printAllBitboards(std::ostream&);

        static void printAsBitboard(Bitboard, std::ostream&);
        static void printMoveAsBinary(Move, std::ostream&);
        static std::string moveToAlgebraic(Move&);
};